{
"extends": "eslint:recommended",
"env": {
  "es6": true,
  "node": true,
  "mocha": true
  },

  "ecmaFeatures": {
    "arrowFunctions": true,
    "binaryLiterals": true,
    "blockBindings": true,
    "classes": true,
    "defaultParams": true,
    "destructuring": true,
    "forOf": true,
    "generators": true,
    "modules": true,
    "objectLiteralComputedProperties": true,
    "objectLiteralDuplicateProperties": true,
    "objectLiteralShorthandMethods": true,
    "objectLiteralShorthandProperties": true,
    "octalLiterals": true,
    "regexUFlag": true,
    "regexYFlag": true,
    "spread": true,
    "superInFunctions": true,
    "templateStrings": true,
    "unicodeCodePointEscapes": true,
    "globalReturn": true,
    "jsx": true
    },


    "rules": {

      "strict": [2, "global"],

      /* Possible Errors BEGIN */

      "no-dupe-args":2,
      "no-extra-parens":2,/* - disallow unnecessary parens (recommended) (fixable) */
      "no-unexpected-multiline":2, /*- Avoid code that looks like two expressions but is actually one */
      "valid-typeof": 2, /*Ensure that the results of typeof are compared against a valid string (recommended) */
      "no-console":0,
      /* Possible Errors END */

      /* Best Practices BEGIN */


      "accessor-pairs":[2], /* - Enforces getter/setter pairs in objects*/
      "block-scoped-var":2, /*- treat var statements as if they were block scoped*/
      /*  complexity - specify the maximum cyclomatic complexity allowed in a program */
      "consistent-return":2, /*/ - require return statements to either always or never specify values */
      "curly":2, /* - specify curly brace conventions for all control statements */
      "default-case":2, /* - require default case in switch statements */
      /*dot-location - enforces consistent newlines before or after dots*/
      "dot-notation":2, /* - encourages use of dot notation whenever possible */
      "eqeqeq":2, /* - require the use of === and !== (fixable) */
      /*  guard-for-in - make sure for-in loops have an if statement
      no-alert - disallow the use of alert, confirm, and prompt
      no-caller - disallow use of arguments.caller or arguments.callee */
      "no-case-declarations": 2 ,/* - disallow lexical declarations in case clauses */
      /*no-div-regex - disallow division operators explicitly at beginning of regular expression*/
      "no-else-return":2, /* - disallow else after a return in an if */
      /*no-empty-label - disallow use of labels for anything other than loops and switches
      no-empty-pattern - disallow use of empty destructuring patterns */
      "no-eq-null":2, /* - disallow comparisons to null without a type-checking operator */
      /*  no-eval - disallow use of eval()
      no-extend-native - disallow adding to native types
      no-extra-bind - disallow unnecessary function binding
      no-fallthrough - disallow fallthrough of case statements (recommended)*/
      "no-floating-decimal": 2, /*- disallow the use of leading or trailing decimal points in numeric literals*/
      "no-implicit-coercion":[2], /* - disallow the type conversions with shorter notations */
      /* no-implied-eval - disallow use of eval()-like methods
      no-invalid-this - disallow this keywords outside of classes or class-like objects
      no-iterator - disallow usage of __iterator__ property
      no-labels - disallow use of labeled statements */
      "no-lone-blocks":2, /* - disallow unnecessary nested blocks */
      /* no-loop-func - disallow creation of functions within loops */
      /* "no-magic-numbers"   - disallow the use of magic numbers */
      /* "no-multi-spaces": - disallow use of multiple spaces (fixable) */
      /*no-multi-str - disallow use of multiline strings */
      /*no-native-reassign - disallow reassignments of native objects
      no-new-func - disallow use of new operator for Function object
      no-new-wrappers - disallows creating new instances of String,Number, and Boolean
      no-new - disallow use of the new operator when not part of an assignment or comparison
      no-octal-escape - disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
      no-octal - disallow use of octal literals (recommended)
      no-param-reassign - disallow reassignment of function parameters
      no-process-env - disallow use of process.env
      no-proto - disallow usage of __proto__ property */
      "no-redeclare":2, /* - disallow declaring the same variable more than once (recommended) */
      "no-return-assign":2, /* - disallow use of assignment in return statement
      /* no-script-url - disallow use of javascript: urls. */
      "no-self-compare":2, /* - disallow comparisons where both sides are exactly the same */
      /*no-sequences - disallow use of the comma operator*/
      /*no-throw-literal - restrict what can be thrown as an exception */
      /*no-unused-expressions - disallow usage of expressions in statement position */
      "no-useless-call":2,/* - disallow unnecessary .call() and .apply()
      no-useless-concat - disallow unnecessary concatenation of literals or template literals
      no-void - disallow use of the void operator
      no-warning-comments - disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
      no-with - disallow use of the with statement
      radix - require use of the second argument for parseInt() */
      "vars-on-top":2, /* - require declaration of all vars at the top of their containing scope */
      "wrap-iife":[2], /*- require immediate function invocation to be wrapped in parentheses*/
      "yoda":[2], /*- require or disallow Yoda conditions*/

      /* Best Practices END */


      /* Variables Begin */

      /*"init-declarations":[2]  - enforce or disallow variable initializations at definition */
      /*  "no-catch-shadow": - disallow the catch clause parameter name being the same as a variable in the outer scope*/
      /*  "no-delete-var": - disallow deletion of variables (recommended)*/
      /*"no-label-var": - disallow labels that share a name with a variable*/
      "no-shadow-restricted-names":2, /* - disallow shadowing of names such as arguments */
      "no-shadow":2, /* - disallow declaration of variables already declared in the outer scope */
      "no-undef-init":2, /* - disallow use of undefined when initializing variables */
      /* "no-undef" - disallow use of undeclared variables unless mentioned in a /*global */ /*block (recommended) */
      /* "no-undefined" - disallow use of undefined variable */
      "no-unused-vars":[2, {"args": "after-used", "argsIgnorePattern": "^_"}],/* - disallow declaration of variables that are not used in the code (recommended)*/
      "no-use-before-define":2, /* - disallow use of variables before they are defined */

      /* Variables End */

      /* Node.js and CommonJs BEGIN */

      "callback-return": [2, ["callback", "cb", "next"]], /* - enforce return after a callback */
      //  "global-require": 2, /* - enforce require() on top-level module scope*/
      /*  "handle-callback-err"/* - enforce error handling in callbacks*/
      /*  "no-mixed-requires"/* - disallow mixing regular variable and require declarations*/
      /*  "no-new-require" /*- disallow use of new operator with the require function*/
      /*    "no-path-concat" /*- disallow string concatenation with __dirname and __filename*/
      /*    "no-process-exit" /*- disallow process.exit()*/
      /*    "no-restricted-modules" /*- restrict usage of specified node modules*/
      /*    "no-sync" /*- disallow use of synchronous methods */

      /* Node.js and CommonJs END */

      /* STYLING RULES BEGIN */
      /*"array-bracket-spacing": [2, "always"], /* enforce spacing inside array brackets (fixable)*/
      "block-spacing": [2, "always"], /* disallow or enforce spaces inside of single line blocks (fixable)*/
      "brace-style": [2, "stroustrup", { "allowSingleLine": false }], /*enforce one true brace style */
      "camelcase": [2, {"properties": "never"}], /* require camel case names*/
      "comma-spacing": [2, {"before": false, "after": true}] ,/*enforce spacing before and after comma (fixable)*/
      "comma-style": [2, "last"], /* enforce one true comma style */
      /*    "computed-property-spacing": [2, "never"], /* require or disallow padding inside computed properties (fixable)*/
      /*    "consistent-this": [2, "self"],
      /* "id-match" /* - require identifiers to match the provided regular expression*/
      "indent": [2, 2], /*pecify tab or space width for your code (fixable)*/
      "key-spacing": [2, {  "beforeColon": false, "afterColon": true }], /* enforce spacing between keys and values in object literal properties*/
      /*  "new-cap": 2, /*require a capital letter for constructors */
      "new-parens": 2, /* disallow the omission of parentheses when invoking a constructor with no arguments*/
      /*  "no-inline-comments": 2,  /*disallow comments inline after code*/
      "no-lonely-if": 2, /* disallow if as the only statement in an else block*/
      "no-mixed-spaces-and-tabs":2,/* disallow mixed spaces and tabs for indentation (recommended)*/
      "no-multiple-empty-lines": [2, {"max": 2}],
      /*  "no-spaced-func": 2,*/
      "no-underscore-dangle": [0],
      "object-curly-spacing": [2, "always"], /* require or disallow padding inside curly braces (fixable)*/
      /*"padded-blocks": [2, "never"],  /*enforce padding within blocks*/
      /* "quotes": [2, "single"], */
      /*  "require-jsdoc": 2, /*Require JSDoc comment */
      "semi-spacing": [2, {"before": false, "after": true}],
      "space-before-blocks": 2,
      "space-return-throw-case":2,
      "semi": [2, "always"],
      "eol-last": 2,
      "max-len": [2, 180, 4],
      "space-before-function-paren": [2, {
      "anonymous": "always",
      "named": "never"
      }],

      /* STYLING RULES END */



      /* ES6 RULES BEGIN */

      /*  "arrow-parens":[2],  /* require parens in arrow function arguments*/
      /*    "arrow-spacing":[2], /*  require space before/after arrow function's arrow (fixable) */
      "constructor-super":[2], /*  verify calls of super() in constructors*/
      "generator-star-spacing":[2], /*  - enforce spacing around the * in generator functions (fixable)*/
      "no-arrow-condition":[2], /* disallow arrow functions where a condition is expected*/
      "no-class-assign":[2],  /* disallow modifying variables of class declarations*/
      "no-const-assign":2,  /* - disallow modifying variables that are declared using const*/
      "no-dupe-class-members":2, /* - disallow duplicate name in class members*/
      "no-this-before-super":2,  /* - disallow use of this/super before calling super() in constructors.*/
      "no-var":2, /* - require let or const instead of var*/
      /*    "object-shorthand":2,  /* require method and property shorthand syntax for object literals*/
      "prefer-arrow-callback":2, /* - suggest using arrow functions as callbacks*/
      "prefer-const":2, /* suggest using const declaration for variables that are never modified after declared*/
      /*   "prefer-reflect":[2],  /* suggest using Reflect methods where applicable*/
      "prefer-spread":[2],  /* suggest using the spread operator instead of .apply().*/
      /*  "prefer-template":[2], /*  suggest using template literals instead of strings concatenation*/
      "require-yield":[2] /* disallow generator functions that do not have yield*/

      /* ES6 RULES END */

    }
}
